import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { IProduct } from '../interfaces/product';
import { ISavedProduct } from '../interfaces/saved-product';
import { ProductService } from '../services/product-service/product.service';
import { ICartItem } from '../interfaces/cart';
import { CartService } from '../services/cart-service/cart.service';
import { IReview } from '../interfaces/reviews';

interface ProductImage {
  imageId: number;
  productId: number;
  imageUrl: string;
}

@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.css']
})
export class ProductDetailComponent implements OnInit {
  product: IProduct | undefined;
  productImages: ProductImage[] = [];
  loading: boolean = true;
  errorMsg: string = '';
  activeImageUrl: string = '';
  quantity: number = 1;
  productId: number = 0;
  is3DViewActive = false;
  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb"; // Default model URL
  showToast = false;
  toastMessage = "";
  toastStatus = 0; // 0 = already added (orange), 1 = successfully added (green)
  userId: number = 0;
  userRoleId: number = 0;
  reviews: (IReview & { showMenu?: boolean })[] = [];
  showReviews: boolean = true;
  currentUserID: number = parseInt(<string>sessionStorage.getItem('userId'));

  


  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private _productService: ProductService,
    private _cartSerive: CartService,
    private elementRef: ElementRef,
  ) { }

  ngOnInit(): void {
    this.productId = +this.route.snapshot.params['id'];

    if (this.productId) {
      this.getProductDetails(this.productId);
      this.getProductImages(this.productId);
      this.loadReviews();  // load reviews for this.productId
    } else {
      this.errorMsg = 'Invalid product ID';
      this.loading = false;
    }
  }

  ngAfterViewInit() {
    this.loadModelViewerScript();
  }

  loadModelViewerScript() {
    const script = document.createElement("script");
    script.type = "module";
    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js";
    document.body.appendChild(script);
  }

  getProductDetails(id: number) {
    console.log("Fetching product details for ID:", id);
    this._productService.getProductById(id).subscribe(
      responseProductData => {
        console.log("Product data received:", responseProductData);
        this.product = responseProductData;
        if (this.product) {
          this.activeImageUrl = this.product.thumbnailUrl;
          this.modelUrl = this.product.modelUrl || this.modelUrl;
        }
        this.loading = false;
      },
      responseProductError => {
        this.errorMsg = responseProductError;
        this.loading = false;
        console.error("Error fetching product:", this.errorMsg);
      },
      () => { console.log('GetProductDetails method executed successfully'); }
    );
  }

  getProductImages(id: number) {
    console.log("Fetching product images for ID:", id);
    this._productService.getProductImages(id).subscribe(
      (responseImagesData: any) => {
        console.log("Product images received:", responseImagesData);
        this.productImages = responseImagesData;
      },
      responseImagesError => {
        this.errorMsg = responseImagesError;
        console.error("Error fetching images:", this.errorMsg);
      },
      () => { console.log('GetProductImages method executed successfully'); }
    );
  }

  loadReviews(): void {
    this._productService.getProductReviews(this.productId).subscribe(
      (reviews: IReview[]) => {
        // Add showMenu property to each review for toggling menu UI
        this.reviews = reviews
          .filter(r => r.isVisible)  // Only visible reviews
          .map(review => ({
            ...review,
            showMenu: false
          }));
      },
      error => {
        console.error('Error fetching reviews:', error);
      }
    );
  }

  toggleMenu(reviewID: number): void {
    const review = this.reviews.find(r => r.reviewID === reviewID);
    if (review) {
      review.showMenu = !review.showMenu;
    }
  }

  deleteReview(reviewID: number): void {
    const review = this.reviews.find(r => r.reviewID === reviewID);
    if (review) {
      review.isVisible = false; // Soft delete

      this._productService.updateReview(review).subscribe(
        () => {
          console.log('Review deleted successfully');
          // Optionally remove from UI immediately:
          this.reviews = this.reviews.filter(r => r.reviewID !== reviewID);
        },
        error => {
          console.error('Error deleting review:', error);
        }
      );
    }
  }

  // Helper to check if current user owns the review
  isOwnReview(review: IReview): boolean {
    return this.currentUserID === review.userID;
  }

  setActiveImage(imageUrl: string) {
    this.activeImageUrl = imageUrl;
    if (this.is3DViewActive) {
      this.is3DViewActive = false;
    }
  }

  active3DView() {
    this.is3DViewActive = true;
  }

  incrementQuantity() {
    if (this.product && this.quantity < this.product.quantity) {
      this.quantity++;
    }
  }

  decrementQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  addToCart() {
    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/cart']);
    } else {
      if (this.product) {
        const cartItem: ICartItem = {
          userId: this.userId,
          productId: this.product.productId,
          quantity: this.quantity
        }

        this._cartSerive.addProductToCart(cartItem).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Cart", 1);
            } else {
              this.showToastMessage("Already Added to Cart", 0);
            }
          },
          responseError => {
            this.errorMsg = responseError;
            console.error("Error Wishlisting product:", this.errorMsg);
          }
        );
      }
    }
  }

  addToWhishlist() {
    const ui: string = <string>sessionStorage.getItem("userId");
    const uri: string = <string>sessionStorage.getItem("userRoleId");

    this.userId = parseInt(ui);
    this.userRoleId = parseInt(uri);

    if (!this.userId) {
      this.router.navigate(['/wishlist']);
    } else {
      if (this.product) {
        const wishlistProduct: ISavedProduct = {
          userId: this.userId,
          productId: this.product.productId
        };
        this._productService.addProductToWishlist(wishlistProduct).subscribe(
          responseData => {
            if (responseData) {
              this.showToastMessage("Product Added to Wishlist", 1);
            } else {
              this.showToastMessage("Already Added to Wishlist", 0);
            }
          },
          responseError => {
            this.errorMsg = responseError;
            console.error("Error Wishlisting product:", this.errorMsg);
          },
          () => { console.log("Add to Wishlist successfully executed!!"); }
        );
      }
    }
  }

  showToastMessage(message: string, status: number) {
    this.toastMessage = message;
    this.toastStatus = status; // 0 = already added (orange), 1 = successfully added (green)
    this.showToast = true;

    setTimeout(() => {
      const toastElement = this.elementRef.nativeElement.querySelector('.toast');
      if (toastElement) {
        toastElement.classList.add('hide');
      }

      setTimeout(() => {
        this.showToast = false;
      }, 300);
    }, 3000);
  }
}






//import { Component, OnInit, AfterViewInit, ElementRef } from '@angular/core';
//import { ActivatedRoute, Router } from '@angular/router';
//import { IProduct } from '../interfaces/product';
//import { ISavedProduct } from '../interfaces/saved-product'
//import { ProductService } from '../services/product-service/product.service';
//import { ICartItem } from '../interfaces/cart';
//import { CartService } from '../services/cart-service/cart.service';
//import { IReview } from '../interfaces/reviews';


//interface ProductImage {
//  imageId: number;
//  productId: number;
//  imageUrl: string;
//}

//@Component({
//  selector: 'app-product-detail',
//  templateUrl: './product-detail.component.html',
//  styleUrls: ['./product-detail.component.css']
//})
//export class ProductDetailComponent implements OnInit {
//  product: IProduct | undefined;
//  productImages: ProductImage[] = [];
//  loading: boolean = true;
//  errorMsg: string = '';
//  activeImageUrl: string = '';
//  quantity: number = 1;
//  productId: number = 0;
//  is3DViewActive = false
//  modelUrl = "https://modelviewer.dev/shared-assets/models/Astronaut.glb" // Default model URL
//  showToast = false;
//  toastMessage = "";
//  toastStatus = 0; // 0 = already added (orange), 1 = successfully added (green)
//  userId: number = 0;
//  userRoleId: number = 0;
//  reviews: IReview[] = [];
//  showReviews: boolean = true;
//  currentUserID: number = parseInt(<string>sessionStorage.getItem('userId'));


//  constructor(
//    private route: ActivatedRoute,
//    private router: Router,
//    private _productService: ProductService,
//    private _cartSerive: CartService,
//    private elementRef: ElementRef,
//  ) { }

//  ngOnInit(): void {
//    this.productId = +this.route.snapshot.params['id'];

    

//    if (this.productId) {
//      this.getProductDetails(this.productId);
//      this.getProductImages(this.productId);
//      //this.getProductReviews(this.productId);
//      this.loadReviews();
//    } else {
//      this.errorMsg = 'Invalid product ID';
//      this.loading = false;
//    }

//  }
//  ngAfterViewInit() {
    
//    this.loadModelViewerScript()
//  }

//  loadModelViewerScript() {
//    const script = document.createElement("script")
//    script.type = "module"
//    script.src = "https://ajax.googleapis.com/ajax/libs/model-viewer/3.3.0/model-viewer.min.js"
//    document.body.appendChild(script)
//  }


//  getProductDetails(id: number) {
//    console.log("Fetching product details for ID:", id);
//    this._productService.getProductById(id).subscribe(
//      responseProductData => {
//        console.log("Product data received:", responseProductData);
//        this.product = responseProductData;
//        if (this.product) {
//          this.activeImageUrl = this.product.thumbnailUrl;
//          this.modelUrl = this.product.modelUrl || this.modelUrl;

//        }
//        this.loading = false;
//      },
//      responseProductError => {
//        this.errorMsg = responseProductError;
//        this.loading = false;
//        console.error("Error fetching product:", this.errorMsg);
//      },
//      () => { console.log('GetProductDetails method executed successfully'); }
//    );
//  }


//  getProductImages(id: number) {
//    console.log("Fetching product images for ID:", id);
//    this._productService.getProductImages(id).subscribe(
//      (responseImagesData: any) => {
//        console.log("Product images received:", responseImagesData);
//        this.productImages = responseImagesData;
//      },
//      responseImagesError => {
//        this.errorMsg = responseImagesError;
//        console.error("Error fetching images:", this.errorMsg);
//      },
//      () => { console.log('GetProductImages method executed successfully'); }
//    );
//  }

//  loadReviews(): void {
//    this._productService.getProductReviews(1).subscribe(
//      (reviews: IReview[]) => {
//        this.reviews = reviews.map(review => ({
//          ...review,
//          showMenu: false // Initially hide the menu
//        }));
//      },
//      error => {
//        console.error('Error fetching reviews:', error);
//      }
//    );
//  }

//  toggleMenu(reviewID: number): void {
//    const review = this.reviews.find(r => r.reviewID === reviewID);
//    if (review) {
//      review.showMenu = !review.showMenu;
//    }
//  }

//  deleteReview(reviewID: number): void {
//    const review = this.reviews.find(r => r.reviewID === reviewID);
//    if (review) {
//      review.isVisible = false;
//      this._productService.updateReview(review).subscribe(
//        () => {
//          console.log('Review deleted successfully');
//        },
//        error => {
//          console.error('Error deleting review:', error);
//        }
//      );
//    }
//  }

//  getProductReviews(productId: number): void {
//    this._productService.getProductReviews(productId).subscribe(
//      (response: IReview[]) => {
//        this.reviews = response.filter(r => r.isVisible);
//      },
//      error => {
//        console.error("Error fetching reviews:", error);
//        this.reviews = [];
//      }
//    );
//  }


//  setActiveImage(imageUrl: string) {
//    this.activeImageUrl = imageUrl;
//    if (this.is3DViewActive) {
//      this.is3DViewActive = false;
//    }
//  }


//  active3DView() {
//    this.is3DViewActive = true;

//  }

//  incrementQuantity() {
//    if (this.product && this.quantity < this.product.quantity) {
//      this.quantity++;
//    }
//  }

//  decrementQuantity() {
//    if (this.quantity > 1) {
//      this.quantity--;
//    }
//  }

//  addToCart() {

//    const ui: string = <string>sessionStorage.getItem("userId");
//    const uri: string = <string>sessionStorage.getItem("userRoleId");

//    this.userId = parseInt(ui);
//    this.userRoleId = parseInt(uri);

//    if (!this.userId) {
//      this.router.navigate(['/cart']);
//    } else {
//      if (this.product) {
//        const cartItem: ICartItem = {
//          userId: this.userId,
//          productId: this.product.productId,
//          quantity: this.quantity
//        }

//        this._cartSerive.addProductToCart(cartItem).subscribe(
//          responseData => {
//            if (responseData) {
//              this.showToastMessage("Product Added to Cart", 1);
//            } else {
//              this.showToastMessage("Already Added to Cart", 0)
//            }
//          },
//          responseError => {
//            this.errorMsg = responseError
//            console.error("Error Wishlisting product:", this.errorMsg);
//          }
//        )

//      }

//    }

    
//  }


//  addToWhishlist() {

//    const ui: string = <string>sessionStorage.getItem("userId");
//    const uri: string = <string>sessionStorage.getItem("userRoleId");

//    this.userId = parseInt(ui);
//    this.userRoleId = parseInt(uri);

//    if (!this.userId) {
//      this.router.navigate(['/wishlist']);
//    } else {


//    if (this.product) {
//      const wishlistProduct: ISavedProduct = {
//        userId: this.userId,
//        productId: this.product.productId
//      }
//      this._productService.addProductToWishlist(wishlistProduct).subscribe(
//        responseData => {
//          if (responseData) {
//            // Product successfully added - show green toast
//            this.showToastMessage("Product Added to Wishlist", 1)
//          } else {
//            // Product already added - show orange toast
//            this.showToastMessage("Already Added to Wishlist", 0)
//          }
//        },
//        responseError => {
//          this.errorMsg = responseError
//          console.error("Error Wishlisting product:", this.errorMsg);
//        },
//        () => { console.log("Add to Wishlist successfully executed!!"); }
//      )
//      }
//    }
//  }


//  showToastMessage(message: string, status: number) {
//    this.toastMessage = message;
//    this.toastStatus = status; // 0 = already added (orange), 1 = successfully added (green)
//    this.showToast = true;

//    setTimeout(() => {
//      // Add the hide class first to animate the toast sliding up
//      const toastElement = this.elementRef.nativeElement.querySelector('.toast');
//      if (toastElement) {
//        toastElement.classList.add('hide');
//      }

//      // Then hide the toast after animation completes
//      setTimeout(() => {
//        this.showToast = false;
//      }, 300); // Match this with the slideUp animation duration
//    }, 3000);
//  }
//}

=============
html

<app-navbar></app-navbar>


<div class="container mt-5" *ngIf="loading">
  <div class="row">
    <div class="col-12 text-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>


<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-2 mt-2" *ngIf="showToast">
  <div class="toast" role="alert" aria-live="assertive" aria-atomic="true"
       [ngClass]="{'show': showToast, 'toast-success': toastStatus === 1, 'toast-warning': toastStatus === 0}">
    <div class="toast-body d-flex align-items-center justify-content-center">
      <i *ngIf="toastStatus === 1" class="fa fa-check-circle me-2"></i>
      <i *ngIf="toastStatus === 0" class="fa fa-exclamation-circle me-2"></i>
      {{toastMessage}}
    </div>
  </div>
</div>



<div class="container mt-5" *ngIf="!loading && product">
  <div class="row">
    <!-- Product Images Section -->
    <div class="col-md-6">
      <div class="product-image-container mb-3 pl-2">
        <!-- Regular Image View -->
        <img *ngIf="!is3DViewActive" [src]="activeImageUrl" class="img-fluid main-product-image p-3" alt="{{ product.name }}">

        <!-- 3D Model Viewer -->
        <model-viewer *ngIf="is3DViewActive"
                      src="{{ modelUrl }}"
                      alt="{{ product.name }} 3D Model"
                      auto-rotate
                      camera-controls
                      shadow-intensity="1"
                      exposure="1"
                      class="model-viewer-container">
        </model-viewer>
      </div>

      <div class="product-thumbnails d-flex flex-wrap">
        <!-- Main thumbnail -->
        <div class="thumbnail-item me-2 mb-2" (click)="setActiveImage(product.thumbnailUrl)"
             [ngClass]="{'active-thumbnail': activeImageUrl === product.thumbnailUrl && !is3DViewActive}">
          <img [src]="product.thumbnailUrl" class=""
               alt="product image">
        </div>

        <!-- 3D Model thumbnail (second position) -->
        <div class="thumbnail-item me-2 mb-2 model-3d-thumb" (click)="active3DView()"
             [ngClass]="{'active-thumbnail': is3DViewActive}">
          <div class=" 3d-thumbnail">
            <i class="fa fa-cube 3d-icon"></i>
            <span class="3d-label">3D</span>
          </div>
        </div>

        <!-- Additional images (starting from third position) -->
        <!--<div class="thumbnail-item me-2 mb-2" *ngFor="let image of productImages" (click)="setActiveImage(image.imageUrl)"
             [ngClass]="{'active-thumbnail': activeImageUrl === image.imageUrl && !is3DViewActive}"
             >
          <img [src]="image.imageUrl" class=""

               alt="product image">
        </div>-->
      </div>
    </div>

    <!-- Product Details Section -->
    <div class="col-md-6 product-detail-section">
      <h1 class="product-title mb-3">{{ product.name }}</h1>

      <div class="product-price mb-4">
        <h3 class="mb-2">₹{{ product.price.toLocaleString() }}</h3>
        <span class="text-success "><span class="fw-bold">In Stock </span>({{ product.quantity }} available)</span>
      </div>

      <div class="quantity-selector d-flex flex-row mb-4 ">
        <div class="input-group flex" style="width: 150px;">
          <button class="btn btn-outline-secondary" type="button" (click)="decrementQuantity()">
            <i class="fa fa-minus"></i>
          </button>
          <input type="text" class="form-control text-center" [value]="quantity" readonly>
          <button class="btn btn-outline-secondary" type="button" (click)="incrementQuantity()">
            <i class="fa fa-plus"></i>
          </button>
        </div>
      </div>

      <div class="product-actions mb-4">
        <button class="btn btn-primary btn-lg me-2" (click)="addToCart()">
          <i class="fa fa-shopping-cart me-2"></i>Add to Cart
        </button>
        <button class="btn btn-outline-secondary btn-lg" (click)="addToWhishlist()">
          <i class="fa fa-heart me-2"></i>Add to Wishlist
        </button>
      </div>
      <div class="product-description mb-4">
        <h4>Description</h4>
        <p>{{ product.description }}</p>
      </div>
    </div>
  </div>
  <div class="product-reviews mt-5">
    <h4 class="mb-3" style="text-align:left">Customer Reviews</h4>
  <div *ngFor="let review of reviews">
    <div class="review-card" *ngIf="review.isVisible">
      <div class="review-header">
        <div>
          <strong>{{ review.firstName }} {{ review.lastName }}</strong>
          <span class="review-date">{{ review.reviewDate | date: 'mediumDate' }}</span>
        </div>

         <!--Three dots button, shown only to the review's author--> 
        <div class="review-menu">
          <button *ngIf="review.userID === currentUserID"
                  class="dots-button"
                  (click)="toggleMenu(review.reviewID)">
            ⋮
          </button>
          <div *ngIf="review.showMenu" class="menu">
            <button (click)="deleteReview(review.reviewID)">Delete Review</button>
          </div>
        </div>
      </div>

      <p class="review-description" style="text-align:left">{{ review.description }}</p>
    </div>
  </div>
</div>

<!-- Error message display -->
<div class="container mt-5" *ngIf="!loading && !product">
  <div class="alert alert-danger" role="alert">
    <h4 class="alert-heading">Product Not Found!</h4>
    <p>Sorry, we couldn't find the product you're looking for. {{ errorMsg }}</p>
    <hr>
    <p class="mb-0">Please try again or browse our other products.</p>
  </div>
</div>
