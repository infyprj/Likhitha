import { Component, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { UserService } from '../services/user-service/user.service';
import { Iuser } from '../interfaces/user';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import firebase from 'firebase/compat/app';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent implements OnInit {
  constructor(
    private userService: UserService,
    private router: Router,
    private toastr: ToastrService,
    private afAuth: AngularFireAuth
  ) {}

  ngOnInit(): void {}

  submitRegisterForm(form: NgForm) {
    const userObj: Iuser = {
      email: form.value.email,
      passwordHash: form.value.password,
      firstName: form.value.firstName,
      lastName: form.value.lastName,
      phoneNumber: form.value.phone,
      address: form.value.address,
      city: form.value.city,
      state: form.value.state,
      postalCode: form.value.postalCode,
      country: form.value.country,
      roleId: 2
    };

    this.userService.registerUser(userObj).subscribe({
      next: (response) => {
        if (response) {
          this.toastr.success('Registration successful!', 'Success');
          this.router.navigate(['/login']);
        } else {
          this.toastr.error('Registration failed. Try again.', 'Error');
        }
      },
      error: (err) => {
        if (err.status === 409 || err.error?.includes('already exists')) {
          this.toastr.warning('User already exists with this email.', 'Warning');
        } else {
          this.toastr.error('Registration error occurred.', 'Error');
        }
      }
    });
  }

  signUpWithGoogle() {
    this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider())
      .then((result) => {
        const user = result.user;
        if (user?.email) {
          const userObj: Iuser = {
            email: user.email,
            passwordHash: '', // Optional or handle separately
            firstName: user.displayName?.split(' ')[0] || '',
            lastName: user.displayName?.split(' ')[1] || '',
            phoneNumber: '',
            address: '',
            city: '',
            state: '',
            postalCode: '',
            country: '',
            roleId: 2
          };

          this.userService.registerUser(userObj).subscribe({
            next: () => {
              this.toastr.success('Google sign-up successful!', 'Success');
              this.router.navigate(['/login']);
            },
            error: (err) => {
              if (err.status === 409) {
                this.toastr.warning('User already registered with Google.', 'Warning');
              } else {
                this.toastr.error('Google registration error.', 'Error');
              }
            }
          });
        }
      })
      .catch(() => {
        this.toastr.error('Google sign-in failed.', 'Error');
      });
  }
}

======
<app-navbar></app-navbar>

<div class="container">
  <form #registerForm="ngForm" (ngSubmit)="submitRegisterForm(registerForm)" style="background-color:beige;">
    <h2 style="text-align:center;">Register</h2>
    <h6 style="text-align:right; color:gray;">All fields are mandatory</h6>

    <!-- First Name -->
    <div class="form-group">
      <label>First Name</label>
      <input type="text" name="firstName" class="form-control" ngModel required pattern="^[a-zA-Z]+$" #firstNameRef="ngModel">
      <div *ngIf="firstNameRef.invalid && (firstNameRef.dirty || firstNameRef.touched)" style="color:red;">
        <small *ngIf="firstNameRef.errors?.['required']">First name is required.</small>
        <small *ngIf="firstNameRef.errors?.['pattern']">Only letters are allowed.</small>
      </div>
    </div>

    <!-- Last Name -->
    <div class="form-group">
      <label>Last Name</label>
      <input type="text" name="lastName" class="form-control" ngModel required pattern="^[a-zA-Z]+$" #lastNameRef="ngModel">
      <div *ngIf="lastNameRef.invalid && (lastNameRef.dirty || lastNameRef.touched)" style="color:red;">
        <small *ngIf="lastNameRef.errors?.['required']">Last name is required.</small>
        <small *ngIf="lastNameRef.errors?.['pattern']">Only letters are allowed.</small>
      </div>
    </div>

    <!-- Email -->
    <div class="form-group">
      <label>Email</label>
      <input type="email" name="email" class="form-control" ngModel required
             pattern="^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$" #emailRef="ngModel">
      <div *ngIf="emailRef.invalid && (emailRef.dirty || emailRef.touched)" style="color:red;">
        <small *ngIf="emailRef.errors?.['required']">Email is required.</small>
        <small *ngIf="emailRef.errors?.['pattern']">Enter a valid email address.</small>
      </div>
    </div>

    <!-- Password -->
    <div class="form-group">
      <label>Password</label>
      <input type="password" name="password" class="form-control" ngModel required minlength="6" #passwordRef="ngModel">
      <div *ngIf="passwordRef.invalid && (passwordRef.dirty || passwordRef.touched)" style="color:red;">
        <small *ngIf="passwordRef.errors?.['required']">Password is required.</small>
        <small *ngIf="passwordRef.errors?.['minlength']">Password must be at least 6 characters.</small>
      </div>
    </div>

    <!-- Phone Number -->
    <div class="form-group">
      <label>Phone Number</label>
      <input type="text" name="phone" class="form-control" ngModel required pattern="^[0-9]{10}$" #phoneRef="ngModel">
      <div *ngIf="phoneRef.invalid && (phoneRef.dirty || phoneRef.touched)" style="color:red;">
        <small *ngIf="phoneRef.errors?.['required']">Phone number is required.</small>
        <small *ngIf="phoneRef.errors?.['pattern']">Enter a valid 10-digit phone number.</small>
      </div>
    </div>

    <!-- Address -->
    <div class="form-group">
      <label>Address</label>
      <input type="text" name="address" class="form-control" ngModel required #addressRef="ngModel">
      <div *ngIf="addressRef.invalid && (addressRef.dirty || addressRef.touched)" style="color:red;">
        <small *ngIf="addressRef.errors?.['required']">Address is required.</small>
      </div>
    </div>

    <!-- City -->
    <div class="form-group">
      <label>City</label>
      <input type="text" name="city" class="form-control" ngModel required #cityRef="ngModel">
      <div *ngIf="cityRef.invalid && (cityRef.dirty || cityRef.touched)" style="color:red;">
        <small *ngIf="cityRef.errors?.['required']">City is required.</small>
      </div>
    </div>

    <!-- State -->
    <div class="form-group">
      <label>State</label>
      <input type="text" name="state" class="form-control" ngModel required #stateRef="ngModel">
      <div *ngIf="stateRef.invalid && (stateRef.dirty || stateRef.touched)" style="color:red;">
        <small *ngIf="stateRef.errors?.['required']">State is required.</small>
      </div>
    </div>

    <!-- Postal Code -->
    <div class="form-group">
      <label>Postal Code</label>
      <input type="text" name="postalCode" class="form-control" ngModel required pattern="^[0-9]{6}$" #postalRef="ngModel">
      <div *ngIf="postalRef.invalid && (postalRef.dirty || postalRef.touched)" style="color:red;">
        <small *ngIf="postalRef.errors?.['required']">Postal code is required.</small>
        <small *ngIf="postalRef.errors?.['pattern']">Enter a valid 6-digit postal code.</small>
      </div>
    </div>

    <!-- Country -->
    <div class="form-group">
      <label>Country</label>
      <input type="text" name="country" class="form-control" ngModel required #countryRef="ngModel">
      <div *ngIf="countryRef.invalid && (countryRef.dirty || countryRef.touched)" style="color:red;">
        <small *ngIf="countryRef.errors?.['required']">Country is required.</small>
      </div>
    </div>

    <!-- Submit Button -->
    <div class="form-group" style="text-align:left;">
      <button type="submit" [disabled]="!registerForm.valid" class="btn btn-primary">Register</button>
    </div>

    <!-- Response Messages -->
    <div *ngIf="showResponse">
      <p style="color: green;" *ngIf="successMsg">{{ successMsg }}</p>
      <p style="color: red;" *ngIf="errorMsg">{{ errorMsg }}</p>
    </div>
  </form>
</div>

<div class="text-center mt-3">
  <button type="button" (click)="signUpWithGoogle()" class="btn btn-danger">
    Sign Up with Google
  </button>
</div>

